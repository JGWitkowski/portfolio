{
  "name": "grunt-daemon",
  "description": "Daemonize grunt tasks",
  "version": "0.1.1",
  "homepage": "https://github.com/Scytl/grunt-daemon.git",
  "author": {
    "name": "Pau FracÃ©s",
    "email": "pfraces@gmail.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/Scytl/grunt-daemon.git"
  },
  "bugs": {
    "url": "https://github.com/Scytl/grunt-daemon/issues"
  },
  "dependencies": {},
  "peerDependencies": {
    "grunt": "*"
  },
  "keywords": [
    "gruntplugin",
    "daemon",
    "wait",
    "forever",
    "keepalive",
    "server"
  ],
  "readme": "grunt-daemon\n============\n\nDaemonize grunt tasks\n\nGetting started\n---------------\n\nThis plugin requires Grunt\n\nIf you haven't used [Grunt][1] before, be sure to check out the\n[Getting Started][2] guide, as it explains how to create a [Gruntfile][3] as\nwell as install and use Grunt plugins. Once you're familiar with that process,\nyou may install this plugin with this command:\n\n```sh\nnpm install grunt-daemon --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile\nwith this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-daemon');\n```\n\nDaemonize task\n--------------\n\nThis task is so simple that we can explain it by showing its code\n\n```js\nfunction () {\n  this.async();\n}\n```\n\n`this.async()` tells [grunt][1] to run in async mode and returns a handle to a\nfuncion to be called when an async task process has finished\n\n```js\nvar done = this.async();\nsetTimeout(function () {\n  done();\n}, 3000);\n```\n\nIn the previous example, the async process is released after 3 seconds using\nthe call to `done()`\n\nHence, the **daemonize** task sets [grunt][1] in async mode and never releases the\nprocess, making [grunt][1] waiting forever until the user stops the process with\n`Ctrl+C`\n\n### Usage\n\nThis task does not require any configuration. Just create a task grouping\nother tasks and put `daemonize` as the last task to give daemon powers to your\ntask group.\n\nFor example, the [grunt-contrib-connect][4] stops listening requests after\n[grunt][1] tasks have finished, so its suitable for unit testing but cannot be used\nby the developer.\n\nThis behavior can be changed with its `keepalive` option, but that doesn't\nallow to get multiple servers listening.\n\nTo enable multiple servers listening forever we can create a task group with\nall connect targets and the **daemonize** task at the end.\n\n```js\n// load required grunt plugins\ngrunt.loadNpmTasks('grunt-contrib-connect');\ngrunt.loadNpmTasks('grunt-daemon');\n\n// configure your connect targets\ngrunt.initConfig({\n\n  // ...\n\n  connect: {\n    foo: {\n      port: 3000\n    },\n    bar: {\n      port: 4000\n    }\n  }\n\n  // ...\n\n});\n\n// register the server task which daemonizes the connect targets\ngrunt.registerTask('server', ['connect', 'daemonize']);\n```\n\nNow, from the command-line you can launch the server task which will keep\nrunning forever ...\n\n    grunt server\n\n>   **Running \"connect:foo\" (connect) task**\n\n>   foo listening on port 3000\n\n>   **Running \"connect:bar\" (connect) task**\n\n>   bar listening on port 4000\n\n>   **Running \"daemonize\" task**\n\n_(waiting forever ...)_\n\nDaemon task\n-----------\n\nThe **daemonize** task is useful for hardcoded task groups, but what if we want\nto daemonize just some [connect][4] targets?\n\nDo we need to create several task groups for several targets combination?\n\nThat is why we have created the **daemon** task\n\nThis task is aimed to be used from the command-line and receive as task\narguments the task and 0 or more targets to be daemonized\n\n### Usage\n\nThis task does not require any configuration. Just load the task in your\n**Gruntfile.js**\n\n```js\ngrunt.loadNpmTasks('grunt-daemon');\n```\n\n_(Note that **grunt-daemon** register both **daemonize** and **daemon** tasks)_\n\nThen, from the command-line you can daemonize any task you want passing the\ntask name as an argument to the **daemon** task\n\n    grunt daemon:connect\n\n>   **Running \"connect:foo\" (connect) task**\n\n>   foo listening on port 3000\n\n>   **Running \"connect:bar\" (connect) task**\n\n>   bar listening on port 4000\n\n>   **Running \"daemonize\" task**\n\n_(waiting forever ...)_\n\nYou can specify the task targets you want to use as further task arguments\n\n    grunt daemon:connect:foo\n\n>   **Running \"connect:foo\" (connect) task**\n\n>   foo listening on port 3000\n\n>   **Running \"daemonize\" task**\n\n_(waiting forever ...)_\n\n### How to: create an alias to a daemonized task\n\nSay you want to create a grunt task wich acts like a daemonized task:\n\na `server` alias to `daemon:connect` which allows to daemonize all task targets\n\n    grunt server\n\nor specify the targets to use (`foo` and `qux` in the example)\n\n    grunt server:foo:qux\n\nFor this kind of aliases you need to include a snippet like the following in your\n`Gruntfile.js` replacing the task name (`server` in the example) and the task\nto be used (`connect` in the example) based on your needs\n\n```js\ngrunt.registerTask('server', function () {\n  grunt.task.run(['daemon', 'connect'].concat(this.args).join(':'));\n});\n```\n\nIn the previous example `server` will become an alias to `daemon:connect`\n\nLicense\n-------\n\nThe MIT License (MIT)\n\n[1]: http://gruntjs.com/\n[2]: http://gruntjs.com/getting-started\n[3]: http://gruntjs.com/sample-gruntfile\n[4]: https://github.com/gruntjs/grunt-contrib-connect\n",
  "readmeFilename": "README.md",
  "_id": "grunt-daemon@0.1.1",
  "_shasum": "b7d8d89f4c7b02f5ad3f67d57770aeff7e249f03",
  "_from": "grunt-daemon@",
  "_resolved": "https://registry.npmjs.org/grunt-daemon/-/grunt-daemon-0.1.1.tgz"
}
